{# -*- mode: Python -*- -#}
{# SPDX-License-Identifier: LGPL-2.1-or-later -#}

{% set base_template = 'base/' + runtime + '-python.jinja2' %}
{%- extends base_template %}

{% block commands %}
{% block python_imports %}
import os
import requests
import sys
import tarfile
import traceback
import urllib.parse
import yaml
import shutil
{% endblock %}

{%- block python_local_imports %}
import kernelci.db
import kernelci.config
{%- endblock %}

{%- block python_globals %}
DB_CONFIG_YAML = """
{{ db_config_yaml }}"""
KERNEL = '{{ kernel if kernel is not none else ""}}'
NODE_ID = '{{ node_id }}'
SRC_DIR = '{{ src_dir if src_dir is not none else ""}}'
TARBALL_URL = '{{ tarball_url }}'
WORKSPACE = '/tmp/kci'
{%- endblock %}

{% block python_base_job -%}
class BaseJob:

    def __init__(self, workspace):
        self._workspace = workspace

    def _get_db(self, db_config_yaml):
        db_config = kernelci.config.db.DatabaseFactory.from_yaml(
            'db', yaml.load(db_config_yaml, Loader=yaml.CLoader)
        )
        if not db_config:
            return None

        api_token = os.getenv('API_TOKEN')
        if not api_token:
            return None

        return kernelci.db.get_db(db_config, api_token)

    def _get_kernel(self, path_url):
        """Downloads and/or copies a kernel image or tarball to the job
        workspace. This method detects whether the kernel provided in
        <path_url> is a local or a remote file and also if it's a
        tarball or a kernel image and does the right thing:
          - remote kernel image: download to workspace dir
          - remote tarball: download and extract to workspace dir
          - local kernel image: copy to worspace dir
          - local tarball file: extract to workspace dir

        Args:
            path_url (str): the local path or remote URL of the kernel

        Returns:
            (str) The absolute path of the kernel image or source in the
            workspace.

        Notes:
            any raised exception is supposed to be handled by the caller.
        """
        local_path = None
        if path_url.startswith(('http', 'ftp')):
            resp = requests.get(path_url, stream=True)
            resp.raise_for_status()
            if '.tar.' in path_url:
                # tarball: download and extract
                tarball_name = os.path.basename(urllib.parse.urlparse(path_url).path)
                base, ext = tarball_name.split('.tar.')
                with tarfile.open(fileobj=resp.raw, mode=f'r|{ext}') as tarball:
                    tarball.extractall(path=self._workspace)
                local_path = os.path.join(self._workspace, base)
            else:
                # kernel image: download and copy
                image_name = os.path.basename(urllib.parse.urlparse(path_url).path)
                local_path = os.path.join(self._workspace, image_name)
                urllib.request.urlretrieve(path_url, local_path)
        else:
            if '.tar.' in path_url:
                with tarfile.open(path_url) as tarball:
                    tarball.extractall(path=self._workspace)
                    local_path = os.path.join(self._workspace, base)
            else:
                local_path = shutil.copy(path_url, self._workspace)
        return local_path

    def _run(self, kernel):
        raise NotImplementedError("_run() method required to run job")

    def _submit(self, result, node_id, db):
        node = db.get_node(node_id)
        node.update({
            'result': result,
            'state': 'done',
        })
        db.submit({'node': node})
        return node

    def run(self, kernel, local_src_dir=False):
        # local_src_dir==True means that the kernel is already extracted
        # to a local path. This is indented mostly for development and
        # debugging purposes.
        print(f"Getting kernel: {kernel}")
        if local_src_dir:
            kernel_path = kernel
        else:
            kernel_path = self._get_kernel(kernel)
        print(f"Kernel path: {kernel_path}")
        print("Running job...")
        return self._run(kernel_path)

    def submit(self, result, node_id, db_config_yaml):
        db = self._get_db(db_config_yaml)
        if db:
            self._submit(result, node_id, db)
{% endblock %}

{% block python_job -%}
class Job(BaseJob):
    pass
{% endblock %}

{% block python_main -%}
def main(args):
    job = Job({% block python_job_constr %}workspace=WORKSPACE{% endblock %})
    try:
        # Default case: fetch the kernel from a remote tarball
        local_src_dir = False
        kernel = TARBALL_URL
        if KERNEL:
            kernel = KERNEL
        if SRC_DIR:
            kernel = SRC_DIR
            local_src_dir = True
        results = job.run(kernel, local_src_dir)
    except Exception:
        print(traceback.format_exc())
        results = None

    if NODE_ID and DB_CONFIG_YAML:
        job.submit(results, NODE_ID, DB_CONFIG_YAML)

    return results


if __name__ == '__main__':
    results = main(sys.argv)
    sys.exit(1 if results is None else 0)
{% endblock %}
{%- endblock %}
